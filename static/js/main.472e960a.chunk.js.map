{"version":3,"sources":["TodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","initialState","name","description","useState","newTodo","setNewTodo","className","type","placeholder","value","onChange","e","target","onClick","preventDefault","createTodo","disabled","del","width","height","viewBox","fill","xmlns","d","TodoItem","editedId","setEditedId","item","delTodo","update","obj","updateTodo","_id","checked","done","console","log","onDoubleClick","TodoList","scope","list","map","el","key","getAll","App","todoList","setTodoList","getTodo","axios","method","url","then","response","data","useEffect","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.472e960a.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction TodoForm(props) {\n\n    const initialState = {name: '', description: ''}\n\n  const [newTodo, setNewTodo] = useState(initialState)\n\n    const createNewItem = (e) => {\n        e.preventDefault();\n        if(newTodo.name !== '' && newTodo.description !== '')\n        props.createTodo(newTodo)\n        setNewTodo(initialState)\n    }\n\n  return (\n    <div className='form-group form-row'>\n      <input\n          type=\"text\"\n          className='form-control col-3 '\n          placeholder='Name'\n          value={newTodo.name}\n          onChange={(e) => setNewTodo({...newTodo, name: e.target.value})}\n      />\n      <input\n          type=\"text\"\n          className='form-control col-5 '\n          placeholder='Description'\n          value={newTodo.description}\n          onChange={(e) => setNewTodo({...newTodo, description: e.target.value})}\n      />\n      <button\n          type='submit'\n          className='btn btn-primary '\n          onClick={createNewItem}\n          disabled={(newTodo.name === '' || newTodo.description === '')}\n      >\n          Create\n      </button>\n    </div>\n  );\n}\n\nexport default TodoForm;\n","import React from 'react';\nimport {JSONSchema6 as node} from \"json-schema\";\n\nconst del = <svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                 xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                    d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n                <path\n                    d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n            </svg>;\n\nfunction TodoItem(props) {\n\n    const {editedId, setEditedId, item, delTodo} = props\n\n    const update = (obj) => {\n        props.updateTodo(obj)\n        setEditedId({})\n    }\n\n    const doneTodo = () => {\n        const obj = {...item, done: !item.done}\n        props.updateTodo(obj)\n        console.log('item', item)\n        console.log('obj', obj)\n    }\n\n    return (\n        <>\n            <tr className=\"row1 \"  onClick={() => item._id !== editedId._id && setEditedId({})}>\n\n                <th>\n                   <input type='checkbox' checked={item.done} onChange={doneTodo}/>\n                </th>\n                <td>\n                    {item._id === editedId._id\n                        ? <span className=\"input-group\">\n                                <input value={editedId.name}\n                                       onChange={(e) => setEditedId({...editedId, name: e.target.value})}/>\n                                <div className=\"input-group-append\">\n                                    <span onClick={() => update(editedId)}>&#10004;</span>\n                                    <span onClick={() => setEditedId({})}>&#10006;</span>\n                                </div>\n                            </span>\n                        : <span className={item.done ? 'text-decoration-line-through mr-5':' mr-5'} onDoubleClick={() => setEditedId(item)}>\n                        {item.name}\n                    </span>}\n                </td>\n                <td>\n                    {item._id === editedId._id\n                        ? <span className=\"input-group\">\n                                <input value={editedId.description}\n                                       onChange={(e) => setEditedId({...editedId, description: e.target.value})}/>\n                                <div className=\"input-group-append\">\n                                    <span  onClick={() => update(editedId)}>&#10004;</span>\n                                    <span  onClick={() => setEditedId({})}>&#10006;</span>\n                                </div>\n                            </span>\n                        : <span className={item.done ? 'text-decoration-line-through mr-5':' mr-5'} onDoubleClick={() => setEditedId(item)}>\n                        {item.description}\n                    </span>}\n                </td>\n                <td>\n                    <span className='ml-2' onClick={() => delTodo(item._id)}>{del}</span>\n                </td>\n            </tr>\n        </>\n    );\n}\n\nexport default TodoItem;\n","import React, {useState} from 'react';\nimport TodoItem from \"./TodoItem\";\n\nfunction TodoList(props) {\n\n    const [editedId, setEditedId] = useState({'_id': '', name: 'name'})\n\n    return (\n        <table className=\"table\">\n            <thead>\n            <tr>\n                <th scope=\"col\" >Done</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Description</th>\n                <th scope=\"col\">Delete</th>\n            </tr>\n            </thead>\n            <tbody>\n                {props.list.map(el => <TodoItem key={el._id} item={el} updateTodo={props.updateTodo} delTodo={props.delTodo} editedId={editedId} setEditedId={setEditedId}/>\n                )}\n            </tbody>\n        </table>\n    );\n}\n\nexport default TodoList;\n","import React, {useEffect, useState} from 'react';\nimport TodoForm from \"./TodoForm\";\nimport TodoList from \"./TodoList\";\nimport axios from \"axios\";\n\nconst getAll = 'http://localhost:5000/todo'\n\nfunction App() {\n    const [todoList, setTodoList] = useState([])\n\n    const getTodo = () => {\n        axios({\n            method: 'get',\n            url: getAll,\n        })\n            .then(function (response) {\n                setTodoList(response.data)\n            });\n    }\n\n    const updateTodo = (obj) => {\n        axios({\n            method: 'patch',\n            url: `${getAll}/${obj._id}`,\n            data: {\n                name: obj.name,\n                description: obj.description,\n                done: obj.done\n            }\n        }).then(()=> getTodo())\n\n    }\n\n    const delTodo = (id) => {\n        axios({\n            method: 'delete',\n            url: `${getAll}/${id}`,\n        }).then(()=> getTodo())\n\n    }\n\n    const createTodo = (obj) => {\n        axios({\n            method: 'post',\n            url: `${getAll}`,\n            data: {\n                name: obj.name,\n                description: obj.description\n            }\n        }).then(()=> getTodo())\n\n    }\n\n    useEffect(()=>{\n        getTodo();\n    }, [])\n\n  return (\n    <div className='container'>\n      <TodoForm createTodo={createTodo}/>\n      <TodoList list={todoList} updateTodo={updateTodo} delTodo={delTodo}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}